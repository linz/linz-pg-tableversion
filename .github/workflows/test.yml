---
name: Test

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize]
  schedule:
    - cron: '0 12 * * 0'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v16

      - name: Run pre-commit hooks
        run: nix-shell --pure --run 'pre-commit run --all-files'

  test-install-from-source:
    name: Test PostgreSQL ${{ matrix.pg }} source install on Ubuntu ${{ matrix.release }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '11', '12', '13', '14']
        release: [bionic, focal]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build Docker container
        run: docker build --build-arg=RELEASE=${{ matrix.release }} --tag=tester .

      - name: Install from source
        run: docker run --rm tester ./test/ci/install-from-source.bash ${{ matrix.pg }}

  test-upgrade:
    name: Test PostgreSQL ${{ matrix.pg }} package upgrade on Ubuntu ${{ matrix.release }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '11']
        include:
          - release: bionic
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build Docker container
        run: docker build --build-arg=RELEASE=${{ matrix.release }} --tag=tester .

      - name: Upgrade from latest release
        run: docker run --rm tester ./test/ci/upgrade.bash ${{ matrix.pg }}

  test-upgrade-using-loader:
    name:
      Test PostgreSQL ${{ matrix.pg }} package upgrade using loader on Ubuntu ${{ matrix.release }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '11']
        include:
          - release: bionic
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build Docker container
        run: docker build --build-arg=RELEASE=${{ matrix.release }} --tag=tester .

      - name: Upgrade from latest release
        run: docker run --rm tester ./test/ci/upgrade-using-loader.bash ${{ matrix.pg }}

  test-upgrade-using-loader-without-extension-support:
    name:
      Test PostgreSQL ${{ matrix.pg }} package upgrade using loader without extension support on
      Ubuntu ${{ matrix.release }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '11']
        include:
          - release: bionic
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build Docker container
        run: docker build --build-arg=RELEASE=${{ matrix.release }} --tag=tester .

      - name: Upgrade from latest release
        run:
          docker run --rm tester ./test/ci/upgrade-using-loader-without-extension-support.bash ${{
          matrix.pg }}

  test-package:
    name: Test PostgreSQL ${{ matrix.pg }} package install on ${{ matrix.os }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '11', '12', '13', '14']
        release: [bionic, focal]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build package
        uses: linz/linz-software-repository@v11
        with:
          release: ${{ matrix.release }}
          packages: jq

      - name: Build Docker container
        run: docker build --build-arg=RELEASE=${{ matrix.release }} --tag=tester .

      - name: Upgrade from latest release
        run:
          docker run --rm --volume="${PWD}/build-area:/packages" tester
          ./test/ci/install-local-package.bash ${{ matrix.pg }}

  package:
    needs:
      - lint
      - test-install-from-source
      - test-package
      - test-upgrade
      - test-upgrade-using-loader
      - test-upgrade-using-loader-without-extension-support
    name: Package for Debian
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        release: [bionic, focal]
      max-parallel: 1
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine packagecloud publication target
        run: |
          # TODO: it would be nice to turn this into a single-liner in
          #       github-action syntax
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event_name: ${{ github.event_name }}"
          REPO=
          if test "${{ github.event_name }}" = 'push'; then
            if expr "${{ github.ref }}" : "refs/tags/" > /dev/null; then
              REPO=test
              git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
            elif test "${{ github.ref }}" = 'refs/heads/packagecloud' \
                   -o "${{ github.ref }}" = 'refs/heads/master'
            then
              REPO=dev
            fi
          fi
          echo "REPO=$REPO" | tee -a $GITHUB_ENV

      - name: Build and release package
        uses: linz/linz-software-repository@v11
        with:
          release: ${{ matrix.release }}
          packages: jq
          packagecloud_token: ${{ secrets.LINZCI_PACKAGECLOUD_TOKEN }}
          packagecloud_repository: ${{ env.REPO }}
          push_to_git_remote: origin

      - name: Archive generated packages
        uses: actions/upload-artifact@v3
        with:
          name: PostgreSQL ${{ matrix.pg }} packages for Ubuntu ${{ matrix.release }}
          path: 'build-area/*.deb'
