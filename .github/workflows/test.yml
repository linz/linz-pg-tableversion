name: test

on:
  push:
    branches:
      - master
      - packagecloud
      - 'release-*'
    tags-ignore:
      - 'debian/*'
  pull_request:
    branches:
      - '*'

jobs:

  test:

    name: Test PostgreSQL ${{ matrix.pg }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            pg: [ '10', '11' ]
            os: [ ubuntu-18.04 ]
    env:
      # Set PATH as postgresql-server-dev-all pretends version is 11
      PATH: /usr/lib/postgresql/${{ matrix.pg }}/bin:/bin:/usr/bin:/usr/local/bin
    steps:
    - uses: actions/checkout@v1
    - name: Install dependencies
      run: |
        sudo apt-get -qqy --purge remove \
            libpq5 \
            libpq-dev \
            *php* \
            postgresql \
            postgresql-client-common \
            postgresql-common
        sudo rm -rf /var/lib/postgresql
        sudo apt-get install curl ca-certificates gnupg
        curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
        sudo apt-get update -qq
        sudo apt-get install -qqy \
            debhelper \
            fakeroot \
            libtap-parser-sourcehandler-pgtap-perl \
            pgxnclient \
            postgresql-client-${{ matrix.pg }} \
            postgresql-${{ matrix.pg }} \
            postgresql-${{ matrix.pg }}-pgtap \
            postgresql-server-dev-all \
            postgresql-server-dev-${{ matrix.pg }}
    - name: Setup PostgreSQL user
      run: |
        sudo -u postgres createuser -s "$USER"
        sudo -u postgres createuser -s root
    - name: Build
      run: |
        # Test https://github.com/linz/postgresql-tableversion/issues/47
        git config --global user.email "ci@github.actions"
        git config --global user.name "CI"
        git tag -fa "travis/1.2.3-4-gdeadbeef" -m "test"
        # Build
        make
    - name: Test build
      run: |
        # Check PostgreSQL versions
        pg_config --version
        psql --version
        psql -c "select version()" template1
        # Pre-install tests
        make check
    - name: Install
      run: |
        sudo env "PATH=$PATH" make install
    - name: Test installation
      run: |
        # Post-install tests
        make installcheck
        make installcheck-loader
        make installcheck-loader-noext
    - name: Test upgrades
      run: |
        # Test upgrades from all tagged versions
        sudo env "PATH=$PATH" test/ci/test_all_upgrades.sh
    - name: Test packaging
      run: |
        # Build the packages
        PG_SUPPORTED_VERSIONS=${{ matrix.pg }} make deb
        # Uninstall directly installed files
        sudo make uninstall
        # Clean PATH to avoid finding binaries left-over by upgrade tests
        PATH=/bin:/usr/bin:/usr/local/bin
        # Install postgresql-agnostic tableversion package
        sudo dpkg -i ../tableversion_*.deb
        dpkg -L tableversion
        # Run post-install postgresql-agnostic tests
        make installcheck-loader-noext
        # Install postgresql-specific tableversion package
        sudo dpkg -i ../postgresql-${{ matrix.pg }}-tableversion_*.deb
        # Run post-install extension based checks
        make installcheck
        make installcheck-loader
        # Test build of packages for all supported PG versions
        make deb
        make deb-check

  package:
    needs: test
    name: Package for Debian
    runs-on: ubuntu-18.04
    strategy:
        matrix:
            distro: [ 'bionic' ]
    steps:
    - uses: actions/checkout@v1

    - name: Determine packagecloud publication target
      run: |
        # TODO: it would be nice to turn this into a single-liner in
        #       github-action syntax
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event_name: ${{ github.event_name }}"
        REPO=
        if test "${{ github.event_name }}" = 'push'; then
          if expr "${{ github.ref }}" : "refs/tags/" > /dev/null; then
            REPO=test
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          elif test "${{ github.ref }}" = 'refs/heads/packagecloud' \
                 -o "${{ github.ref }}" = 'refs/heads/master'
          then
            REPO=dev
          fi
        fi
        echo "REPO=$REPO" | tee -a $GITHUB_ENV

    - uses: linz/linz-software-repository@v4
      with:
        packagecloud_token: ${{ secrets.LINZCI_PACKAGECLOUD_TOKEN }}
        packagecloud_repository: ${{ env.REPO }}
