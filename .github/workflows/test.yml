---
name: Test

on:
  push:
    branches:
      - master
      - packagecloud
      - 'release-*'
    tags-ignore:
      - 'debian/*'
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: '0 12 * * 0'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v2.4.0

      - name: Install Nix
        uses: cachix/install-nix-action@v16

      - name: Run pre-commit hooks
        run: nix-shell --pure --run 'pre-commit run --all-files'

  test-source:
    name: Test PostgreSQL ${{ matrix.pg }} source install on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '12', '14']
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-latest]
    env:
      # Set PATH as postgresql-server-dev-all pretends version is 11
      PATH: /usr/lib/postgresql/${{ matrix.pg }}/bin:/bin:/usr/bin:/usr/local/bin
      package_name: postgresql-${{ matrix.pg }}-tableversion
    steps:
      - name: Check out repository
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Remove conflicting packages
        run: |
          sudo apt-get -qqy --purge remove \
              libpq5 \
              libpq-dev \
              *php* \
              postgresql \
              postgresql-client-common \
              postgresql-common

      - name: Remove PostgreSQL install files
        run: sudo rm -rf /var/lib/postgresql

      - name: Update package database
        run: sudo apt-get update

      - name: Install setup dependencies
        run: sudo apt-get install curl ca-certificates gnupg

      - name: Trust PostgreSQL repository key
        run: curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

      - name: Get release codename
        id: distro
        run: echo "::set-output name=codename::$(lsb_release --codename --short)"

      - name: Add PostgreSQL APT repo
        run:
          echo "deb http://apt.postgresql.org/pub/repos/apt/ ${{ steps.distro.outputs.codename
          }}-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list

      - name: Update package database with PostgreSQL repo
        run: sudo apt-get update

      - name: Install test dependencies
        run: |
          sudo apt-get install --assume-yes \
              debhelper \
              fakeroot \
              libtap-parser-sourcehandler-pgtap-perl \
              pgxnclient \
              postgresql-client-${{ matrix.pg }} \
              postgresql-${{ matrix.pg }} \
              postgresql-${{ matrix.pg }}-pgtap \
              postgresql-server-dev-all \
              postgresql-server-dev-${{ matrix.pg }}

      - name: Setup current user as PostgreSQL superuser
        run: sudo --user=postgres createuser --superuser "$USER"

      - name: Setup PostgreSQL root user
        run: sudo --user=postgres createuser --superuser root

      - name: Build
        run: make

      - name: Test build
        run: make check

      - name: Install
        run: sudo env "PATH=$PATH" make install

      - name: Test installation
        run: make installcheck

      - name: Test loader
        run: make installcheck-loader

      - name: Test loader without extension
        run: make installcheck-loader-noext

      - name: Configure packagecloud.io repository
        run:
          curl --silent https://packagecloud.io/install/repositories/linz/prod/script.deb.sh | sudo
          bash

      - name: Install latest package (1)
        run: sudo apt-get --assume-yes install "$package_name"

      - name: Get installed package version
        id: package
        run:
          echo "::set-output name=version::$(dpkg-query --showformat='${Version}' --show
          "$package_name" | cut --delimiter=- --fields=1)"

      - name: Upgrade without loader
        run: make installcheck-upgrade PREPAREDB_UPGRADE_FROM="${{ steps.package.outputs.version }}"

      - name: Uninstall (1)
        run: sudo make uninstall

      - name: Install latest package (2)
        run: sudo apt-get --assume-yes install "$package_name"

      - name: Run loader upgrade in extension mode
        run:
          sudo make installcheck-loader-upgrade PREPAREDB_UPGRADE_FROM="${{
          steps.package.outputs.version }}"

      - name: Uninstall (2)
        run: sudo make uninstall

      - name: Install latest package (3)
        run: sudo apt-get --assume-yes install "$package_name"

      - name: Run loader upgrade without extension mode
        run:
          make installcheck-loader-upgrade-noext PREPAREDB_UPGRADE_FROM="${{
          steps.package.outputs.version }}"

      - name: Uninstall (3)
        run: sudo make uninstall

  test-source-without-git-metadata:
    name: Test PostgreSQL ${{ matrix.pg }} source install without Git metadata on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        pg: ['14']
        os: [ubuntu-latest]
    env:
      # Set PATH as postgresql-server-dev-all pretends version is 11
      PATH: /usr/lib/postgresql/${{ matrix.pg }}/bin:/bin:/usr/bin:/usr/local/bin

    steps:
      - name: Check out repository
        uses: actions/checkout@v2.4.0

      - name: Remove conflicting packages
        run: |
          sudo apt-get -qqy --purge remove \
              libpq5 \
              libpq-dev \
              *php* \
              postgresql \
              postgresql-client-common \
              postgresql-common

      - name: Remove PostgreSQL install files
        run: sudo rm --force --recursive /var/lib/postgresql

      - name: Update package database
        run: sudo apt-get update

      - name: Install setup dependencies
        run: sudo apt-get install curl ca-certificates gnupg

      - name: Trust PostgreSQL repository key
        run: curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

      - name: Get release codename
        id: distro
        run: echo "::set-output name=codename::$(lsb_release --codename --short)"

      - name: Add PostgreSQL APT repo
        run:
          echo "deb http://apt.postgresql.org/pub/repos/apt/ ${{ steps.distro.outputs.codename
          }}-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list

      - name: Update package database with PostgreSQL repo
        run: sudo apt-get update

      - name: Install test dependencies
        run: |
          sudo apt-get install --assume-yes \
              debhelper \
              fakeroot \
              libtap-parser-sourcehandler-pgtap-perl \
              pgxnclient \
              postgresql-client-${{ matrix.pg }} \
              postgresql-${{ matrix.pg }} \
              postgresql-${{ matrix.pg }}-pgtap \
              postgresql-server-dev-all \
              postgresql-server-dev-${{ matrix.pg }}

      - name: Setup current user as PostgreSQL superuser
        run: sudo --user=postgres createuser --superuser "$USER"

      - name: Setup PostgreSQL root user
        run: sudo --user=postgres createuser --superuser root

      - name: Remove Git metadata
        run: rm --recursive .git

      - name: Install
        run: sudo env "PATH=$PATH" make install

      - name: Test installation
        run: make installcheck

      - name: Test loader
        run: make installcheck-loader

      - name: Test loader without extension
        run: make installcheck-loader-noext

      - name: Uninstall
        run: sudo make uninstall

  test-package:
    name: Test PostgreSQL ${{ matrix.pg }} package install on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        pg: ['10', '12', '14']
        include:
          - os: ubuntu-18.04
            release: bionic
          - os: ubuntu-20.04
            release: focal
          - os: ubuntu-latest
            release: focal
    env:
      # Set PATH as postgresql-server-dev-all pretends version is 11
      PATH: /usr/lib/postgresql/${{ matrix.pg }}/bin:/bin:/usr/bin:/usr/local/bin
    steps:
      - name: Check out repository
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Remove conflicting packages
        run: |
          sudo apt-get -qqy --purge remove \
              libpq5 \
              libpq-dev \
              *php* \
              postgresql \
              postgresql-client-common \
              postgresql-common

      - name: Remove PostgreSQL install files
        run: sudo rm -rf /var/lib/postgresql

      - name: Update package database
        run: sudo apt-get update

      - name: Install setup dependencies
        run: sudo apt-get install curl ca-certificates gnupg

      - name: Trust PostgreSQL repository key
        run: curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

      - name: Get release codename
        id: distro
        run: echo "::set-output name=codename::$(lsb_release --codename --short)"

      - name: Add PostgreSQL APT repo
        run:
          echo "deb http://apt.postgresql.org/pub/repos/apt/ ${{ steps.distro.outputs.codename
          }}-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list

      - name: Update package database with PostgreSQL repo
        run: sudo apt-get update

      - name: Install test dependencies
        run: |
          sudo apt-get install --assume-yes \
              debhelper \
              fakeroot \
              libtap-parser-sourcehandler-pgtap-perl \
              pgxnclient \
              postgresql-client-${{ matrix.pg }} \
              postgresql-${{ matrix.pg }} \
              postgresql-${{ matrix.pg }}-pgtap \
              postgresql-server-dev-all \
              postgresql-server-dev-${{ matrix.pg }}

      - name: Setup current user as PostgreSQL superuser
        run: sudo --user=postgres createuser --superuser "$USER"

      - name: Setup PostgreSQL root user
        run: sudo --user=postgres createuser --superuser root

      - name: Build local debian package
        uses: linz/linz-software-repository@v8
        with:
          release: ${{ matrix.release }}
        env:
          PG_SUPPORTED_VERSIONS: ${{ matrix.pg }}

      - name: Install postgresql-agnostic tableversion package
        run: sudo dpkg -i build-area/tableversion_*.deb

      - name: Show package contents
        run: dpkg -L tableversion

      - name: Run post-install postgresql-agnostic tests
        run: make installcheck-loader-noext

      - name: Install postgresql-specific tableversion package
        run: sudo dpkg -i build-area/postgresql-${{ matrix.pg }}-tableversion_*.deb

      - name: Test installation
        run: make installcheck

      - name: Test loader
        run: make installcheck-loader

      - name: Build packages for all supported versions
        uses: linz/linz-software-repository@v8
        with:
          release: ${{ matrix.release }}

      - name: Test package
        run: make deb-check

  package:
    needs:
      - lint
      - test-source
      - test-package
    name: Package for Debian
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        distro: [bionic, focal]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Determine packagecloud publication target
        run: |
          # TODO: it would be nice to turn this into a single-liner in
          #       github-action syntax
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub event_name: ${{ github.event_name }}"
          REPO=
          if test "${{ github.event_name }}" = 'push'; then
            if expr "${{ github.ref }}" : "refs/tags/" > /dev/null; then
              REPO=test
              git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
            elif test "${{ github.ref }}" = 'refs/heads/packagecloud' \
                   -o "${{ github.ref }}" = 'refs/heads/master'
            then
              REPO=dev
            fi
          fi
          echo "REPO=$REPO" | tee -a $GITHUB_ENV

      - name: Upload to Packagecloud
        uses: linz/linz-software-repository@v8
        with:
          release: ${{ matrix.distro }}
          packagecloud_token: ${{ secrets.LINZCI_PACKAGECLOUD_TOKEN }}
          packagecloud_repository: ${{ env.REPO }}
